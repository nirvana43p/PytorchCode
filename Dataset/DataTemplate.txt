# -*- coding: utf-8 -*-
"""
Created on Fri Nov 12 09:22:22 2021

    This is a template of the Dataset class from torch.utils.data module. 
    This template is focused in supervised learning datasets.
    
    Also, it shows the ToTensor class, the objetive of this class is to 
    transform either numpy arrays or pandas dataframes to tensor objects

@author: Jorge Ivan Avalos Lopez
python: 3.8.3
pytorch: 1.6.0
sklearn: 0.23.1
"""


import torch
from torch.utils.data import Dataset
from sklearn.model_selection import train_test_split



class myData(Dataset):
    
    """ __init__ method creation
    
        Args:
            transform (Class) : Define a transformation of the dataset
            train (Bool) : Define training or test data
            split_data (Dict) : Define defaul parameters to train_test_split function
    """
    
    def __init__(self,path,transform = None, train = True, 
                 split_data = {"test_size" : 0.2, "random_state" : None}):
        super(myData, self).__init__()
        
        self._path = path
        self._transform = transform
        self._train = train
        self._split_data = split_data
        
        # Read the dataset from a csv, h5, json, html, etc.
        # TODO ------------
        
        
        # Split X_data (input vector - feature vector) and Y_data(output_vector - label vector)
        # from de dataset
        # TODO ------------
        
        # Do some preprocessing if need it.
        # TODO ------------
        
        # Split dataset into train and test using train_test_split
        _ , _ , _, _ = train_test_split(_,_, 
                                        test_size = self._split_data["test_size"],
                                        random_state = self._split_data["random_state"])
        
        
        # Get the cardinality of the dataset
        if self._train:
            self._n_samples = # TODO ------------
        else:
            self._n_samples = # TODO ------------
        
    
    """ __getitem__ magic method to index the object
        
        Args:
            index (Integer) : Define the index
            
        Return:
            sample (Tuple) : (input vector, label vector)
    
    """
    def __getitem__(self, index):
        
        if isinstance(index, int):
            
            if self._train:
                sample = _[index], _[index]
            else:
                sample = _[index], _[index]
        
            if self._transform:
                sample = self._transform(sample)
            
            return sample
                
        else:
            raise Exception("{} is not an Integer".format(index))
        
        
    """ __len__ magic method to len the object
    
    """
    def __len__(self):
        return self._n_samples
        
        
class ToTensor:
    
    """ __call__ magic method to recive objects and transform them 
        
        Return: 
            (torch.Tensor, torch.Tensor)
    """
    def __call__(self, sample):
        x, y = sample
        return torch.TODO----(x), torch.TODO----(y)
        
        
        
        
        
        
        
        
        
        
        

